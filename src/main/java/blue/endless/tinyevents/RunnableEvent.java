/*
 * MIT License
 *
 * Copyright (c) 2021 Falkreon (Isaac Ellingson)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package blue.endless.tinyevents;

import java.util.concurrent.Executor;

import blue.endless.tinyevents.impl.RunnableEventListImpl;

public interface RunnableEvent {
	
	void fire();
	
	/**
	 * Registers an event handler to be run when this Event is fired.
	 * 
	 * <p>Note: Because of the semantics regarding lambdas, the following will not work:
	 * <code><pre>
	 * public void throwSomething() {
	 *   assert(false);
	 * }
	 * 
	 * public static void main(String[] args) {
	 *   RunnableEvent onRun = RunnableEvent.create();
	 *   onRun.register(this::throwSomething);
	 *   onRun.unregister(this::throwSomething);
	 *   onRun.fire();
	 * }
	 * </pre></code>
	 * 
	 * <p>This is because the lambda which {@code this::throwSomething} is implicitly cast
	 * to, (causing the lambda to be generated by lambdaMetafactory) may be different for
	 * each capture site. This was done to make lambdas extremelyfast, but is inconvenient
	 * for event systems. A workaround is to say instead,
	 * 
	 * <code><pre>
	 * public void throwSomething() {
	 *   assert(false);
	 * }
	 * 
	 * public static void main(String[] args) {
	 *   RunnableEvent onRun = RunnableEvent.create();
	 *   
	 *   Runnable handler = this::throwSomething; //handler is always reference-equal to handler
	 *   
	 *   onRun.register(handler);
	 *   onRun.unregister(handler);
	 *   onRun.fire();
	 * }
	 * </pre></code>
	 * 
	 * @param handler
	 */
	void register(Runnable handler);
	
	/**
	 *Registers an event handler to be run when this Event is fired.
	 *
	 * @param handler The event handler to be invoked when {@link #fire()} is called.
	 * @param key     A key which can be later used to unregister the event handler
	 */
	void register(Runnable handler, Object key);
	
	/**
	 * Registers an event handler to be run when this Event is fired.
	 * @param handler  The event handler to be invoked when {@link #fire()} is called.
	 * @param executor The executor to run the handler on
	 */
	void register(Runnable handler, Executor executor);
	
	/**
	 * Registers an event to be called when {@link #fire()} is called.
	 * 
	 * 
	 * @param handler  The event handler to be invoked when {@link #fire()} is called.
	 * @param executor The executor to run the handler on
	 * @param key      A key which can later be used to unregister the event handler
	 */
	void register(Runnable handler, Executor executor, Object key);
	
	/**
	 * Unregisters and event handler. The object will be <em>reference-compared</em> (==) with
	 * the key of each existing event handler to determine whether it should be unregistered.
	 * If multiple event handlers were registered with this key, all of them will be removed.
	 * @param key
	 */
	void unregister(Object key);
	
	
	
	public static RunnableEvent create() {
		return new RunnableEventListImpl();
	}
}
